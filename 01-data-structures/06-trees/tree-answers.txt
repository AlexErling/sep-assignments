1. Binary Tree: "The Matrix: 87\nBraveheart: 78\nMad Max 2: The Road Warrior: 98\nPacific Rim: 72\nInception: 86\nDistrict 9: 90\nStar Wars: Return of the Jedi: 80\nThe Shawshank Redemption: 91\nThe Martian: 92\nStar Wars: The Empire Strikes Back: 94\nStar Wars: A New Hope: 93\n"

Binary Min Heap:
"Pacific Rim: 72\nThe Matrix: 87\nDistrict 9: 90\nStar Wars: A New Hope: 93\nThe Martian: 92\nMad Max 2: The Road Warrior: 98\nStar Wars: The Empire Strikes Back: 94\n"

2.
                user     system      total        real
tree insert    0.360000   0.010000   0.370000 (  0.373741)
heap insert    0.140000   0.000000   0.140000 (  0.143576)
                user     system      total        real
tree find      0.000000   0.000000   0.000000 (  0.000010)
heap find      0.000000   0.000000   0.000000 (  0.000006)
                user     system      total        real
tree delete    0.000000   0.000000   0.000000 (  0.000006)
heap delete    0.000000   0.000000   0.000000 (  0.000005)

Questions:
How much time does an average insertion consume in the Binary Search Tree compared to the Heap?
  An average insertion takes about 2.7x as long for the tree compared to the heap.
How much time does finding 50000 in the Binary Search Tree consume compared to the Heap?
  The Binary Search Tree takes about 1.7x time as long as the Binary Heap.
How much time does the average deletion consume in a Binary Search Tree compared to the Heap?
  The Binary heap deleted slightly faster than the Binary tree.
When would you use a Binary Search Tree and why?
  I would use a head when that specific data structure was called for, and we are using for more general searching.
When would you use an Heap and why?
  I would use a heap when speed and efficiency were a high priority, when we would need to insert more data,  or when find the max/min or we need to put in a heap property.
